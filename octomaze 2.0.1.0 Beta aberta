#include <iostream>
#include <unistd.h>
#include <cmath>
#include <fstream>
#include <string> 
#include <termios.h>

using namespace std;
struct termios originalTermio;
int linha, coluna; //labirinto
int level; // fase
int locx, locy; // jogador
char ultecla; // movimenta√ß√£o
int locA = -1, locB = -1; // localiza√ß√£o para objetos
string resultado = "jogando"; // estado da partida

void fase(int v[][40]) {
    static ifstream arquivo("fases.txt"); // Abre s√≥ uma vez
    static bool primeira_vez = true;
    
    if (!arquivo.is_open()) {
        cout << "Erro ao abrir o arquivo!" << endl;
        return;
    }
    
    // L√™ os dados do arquivo
    arquivo >> level;
    arquivo >> linha;
    arquivo >> coluna;
    
    for (int i = 0; i < linha; i++) {
        for (int j = 0; j < coluna; j++) {
            arquivo >> v[i][j]; 
        }
    }
    
    // Arquivo permanece aberto para a pr√≥xima leitura!
}

void playerloc(int v[][40], int alt, int larg, int &locx, int &locy) {
    for (int i = 0; i < larg; i++) {
        for (int j = 0; j < alt; j++) {
            if (v[i][j] == 2) {
                locx = i;
                locy = j;
            }
        }
    }
}

void busca(int v[][40], int busca){
    for(int i = 0; i < linha; i++) {
        for(int j = 0; j < coluna; j++) {
            if(v[i][j] == busca) {
                locA = i; 
                locB = j;
                return;
            }
        }
        
    }
}


void teleportar(int v[][40], int tp, char posi){
    busca(v, tp);  // busca posi√ß√£o do teleporte (7)
    
    // Remove jogador da posi√ß√£o antiga
    v[locx][locy] = 0;

    // Teleporta o jogador para o lado oposto do teleporte dependendo da dire√ß√£o de entrada
    if(posi == 'w'){
        // Jogador vem de baixo para cima, coloca ele logo abaixo do teleporte
        locx = locA - 1; 
        locy = locB;
    }
    else if (posi == 's'){
        // Jogador vem de cima para baixo, coloca ele logo acima do teleporte
        locx = locA + 1;
        locy = locB;
    }
    else if (posi == 'a'){
        // Jogador vem da direita para esquerda, coloca ele √† direita do teleporte
        locx = locA;
        locy = locB - 1;
    }
    else if (posi == 'd'){
        // Jogador vem da esquerda para direita, coloca ele √† esquerda do teleporte
        locx = locA;
        locy = locB + 1;
    }

    // Atualiza a posi√ß√£o do jogador no labirinto
    v[locx][locy] = 2;
}


void remove(int v[][40],int remover, int substituir){
    for(int i = 0; i  < 3; i++)
    {
        busca(v, remover);
        v[locA][locB] = substituir;
    }
}

void restaurarTerminal() {
    tcsetattr(STDIN_FILENO, TCSANOW, &originalTermio);
}

void lerTecla() {
    struct termios newt;
    
    
    tcgetattr(STDIN_FILENO, &originalTermio);
    
    newt = originalTermio;
    newt.c_lflag &= ~(ICANON | ECHO);
    tcsetattr(STDIN_FILENO, TCSANOW, &newt);
    
    ultecla = getchar();
    
    
    restaurarTerminal();
}

void lab(int lab[40][40], int largura, int altura) {
    for (int i = 0; i < largura; i++) {
        for (int j = 0; j < altura; j++) {
            if (lab[i][j] == 0)
            cout << "  ";
            else if (lab[i][j] == -1)
            cout << "\033[31m‚ñà‚ñà\033[0m";
            else if (lab[i][j] == 1)
            cout << "‚ñà‚ñà";
            else if (lab[i][j] == 2)
            cout << "üëæ";
            else if (lab[i][j] == 3)
            cout << "‚õ≥Ô∏è";
            else if (lab[i][j] == 4)
            cout << "üìç";
            else if (lab[i][j] == 5)
            cout << "üöß";
            else if (lab[i][j] == 6)
            cout << "üö™";
            else if (lab[i][j] == 7)
            cout << "üö™";
            else if (lab[i][j] == 8)
            cout << "üì¶";
            else if (lab[i][j] == 9)
            cout << "üåÄ";    
            else if (lab[i][j] == 10)
            cout << "üåÄ";
            else if (lab[i][j] == 11)
            cout << "üëª";
        }
        cout << endl;
    }
}


// Emite um som de alerta (bell)
void beep() {
    std::cout << "\a"; // Caractere de alerta (bell)
    std::cout.flush(); // For√ßa a sa√≠da imediata
}


void move(int v[][40], char ultecla, int &locx, int &locy) {
    int new_x = locx;
    int new_y = locy;
    
    // MOVE CIMA (W)
    if(ultecla == 'w') {
        if (v[locx - 1][locy] == 0) {
            new_x = locx - 1;
            v[locx][locy] = 0;
            locx = new_x; v[locx][locy] = 2;
        }
        else if(v[locx - 1][locy] == 1 || v[locx - 1][locy] == -1) {
            v[locx - 1][locy] = -1;
            beep();
        }
        else if(v[locx - 1][locy] == 3) {
            level = level + 1;
            resultado = "venceu";
        }
        else if(v[locx - 1][locy] == 4) {
            v[locx - 1][locy] = 0;
            remove(v, 5, 0);
        }
        else if(v[locx - 1][locy] == 5) {
            beep();
        }
        else if(v[locx - 1][locy] == 6) {
            v[locx][locy] = -1;
            teleportar(v, 7, ultecla);
        }
        else if(v[locx - 1][locy] == 7){
            v[locx][locy] = -1;
            teleportar(v, 6, ultecla);
        }
        else if(v[locx - 1][locy] == 8 && v[locx - 2][locy] == 0){
            v[locx - 2][locy] = 8;
            v[locx - 1][locy] = 2;
            v[locx][locy] = 0;
            locx--;
        }
        else if(v[locx - 1][locy] == 9){
            v[locx][locy] = -1;
            teleportar(v, 10, ultecla);
        }
        else if(v[locx - 1][locy] == 10){
        v[locx][locy] = -1;
        teleportar(v, 9, ultecla);
        }
    }
     // MOVE ESQUERDA (A)
    else if(ultecla == 'a') {
        if (v[locx][locy - 1] == 0) {
            new_y = locy - 1;
            v[locx][locy] = 0;
            locy = new_y; v[locx][locy] = 2;
        }
        else if(v[locx][locy - 1] == 1 || v[locx][locy - 1] == -1) {
            v[locx][locy - 1] = -1;
            beep();
        }
        else if(v[locx][locy - 1] == 3) {
            level = level + 1;
            resultado = "venceu";
        }
        else if(v[locx][locy - 1] == 4) {
            v[locx][locy - 1] = 0;
            remove(v, 5, 0);
        }
        else if(v[locx][locy - 1] == 5) {
            beep();
        }
        else if(v[locx][locy - 1] == 6) {
            v[locx][locy] = -1;
            teleportar(v, 7, ultecla);
        }
        else if(v[locx][locy - 1] == 7){
            v[locx][locy] = -1;
            teleportar(v, 6, ultecla);
        }
        else if(v[locx][locy - 1] == 8 && v[locx][locy - 2] == 0){
            v[locx][locy - 2] = 8;
            v[locx][locy - 1] = 2;
            v[locx][locy] = 0;
            locy--;
        }
        else if(v[locx][locy - 1] == 9){
            v[locx][locy] = -1;
            teleportar(v, 10, ultecla);
        }
        else if(v[locx][locy - 1] == 10){
            v[locx][locy] = -1;
            teleportar(v, 9, ultecla);
        }
    }
    // MOVE DIREITA (D)
    else if(ultecla == 'd') {
        if (v[locx][locy + 1] == 0) {
            new_y = locy + 1;
            v[locx][locy] = 0;
            locy = new_y; v[locx][locy] = 2;
        }
        else if(v[locx][locy + 1] == 1 || v[locx][locy + 1] == -1) {
            v[locx][locy + 1] = -1;
            beep();
        }
        else if(v[locx][locy + 1] == 3) {
            level = level + 1;
            resultado = "venceu";
        }
        else if(v[locx][locy + 1] == 4) {
            v[locx][locy + 1] = 0;
            remove(v, 5, 0);
        }
        else if(v[locx][locy + 1] == 5) {
            beep();
        }
        else if(v[locx][locy + 1] == 6) {
            v[locx][locy] = -1;
            teleportar(v, 7, ultecla);
        }
        else if(v[locx][locy + 1] == 7){
            v[locx][locy] = -1;
            teleportar(v, 6, ultecla);
        }
        else if(v[locx][locy + 1] == 8 && v[locx][locy + 2] == 0){
            v[locx][locy + 2] = 8;
            v[locx][locy + 1] = 2;
            v[locx][locy] = 0;
            locy++;
        }
        else if(v[locx][locy + 1] == 9){
            v[locx][locy] = -1;
            teleportar(v, 10, ultecla);
        }
        else if(v[locx][locy + 1] == 10){
            v[locx][locy] = -1;
            teleportar(v, 9, ultecla);
        }
    }
    // MOVE BAIXO (S)
    else if(ultecla == 's') {
        if (v[locx + 1][locy] == 0) {
            new_x = locx + 1;
            v[locx][locy] = 0;
            locx = new_x; v[locx][locy] = 2;
        }
        else if(v[locx + 1][locy] == 1 || v[locx + 1][locy] == -1) {
            v[locx + 1][locy] = -1;
            beep();
        }
        else if(v[locx + 1][locy] == 3){
            level = level + 1;
            resultado = "venceu";
        }
        else if(v[locx + 1][locy] == 4) {
            v[locx + 1][locy] = 0;
            remove(v, 5, 0);
        }
        else if(v[locx + 1][locy] == 5) {
            beep();
        }
        else if(v[locx + 1][locy] == 6) {
            v[locx][locy] = -1;
            teleportar(v, 7, ultecla);
        }
        else if(v[locx + 1][locy] == 7){
            v[locx][locy] = -1;
            teleportar(v, 6, ultecla);
        }
        else if(v[locx + 1][locy] == 8 && v[locx + 2][locy] == 0){
            v[locx + 2][locy] = 8;
            v[locx + 1][locy] = 2;
            v[locx][locy] = 0;
            locx++;
        }
        else if(v[locx + 1][locy] == 9){
            v[locx][locy] = -1;
            teleportar(v, 10, ultecla);
        }
        else if(v[locx + 1][locy] == 10){
            v[locx][locy] = -1;
            teleportar(v, 9, ultecla);
        }
    }
}

void limpar() {
    system("clear");
}

int main() {
    
    while(resultado != "derrota" && level != 7){
    // Carrega a fase
    int v[40][40];
    fase(v);
    
    // Encontra a posi√ß√£o do jogador
    
    cout << "Level: " << level << endl;
    cout << "Pressione teclas W-A-S-D (Q para sair)...";
    
    playerloc(v, coluna, linha, locx, locy);
    while (resultado == "jogando") {
        limpar();
        lab(v, linha, coluna);
        cout << "\nUse W-A-S-D para mover (Q para sair)" << endl;
        
        lerTecla(); // L√™ a tecla
        
        if (ultecla == 'q' || ultecla == 'Q') break;
        
        if (ultecla == 'w' || ultecla == 'a' || ultecla == 's' || ultecla == 'd') {
            move(v, ultecla, locx, locy);
        }
        else if (resultado == "derrota")
        return 0;
    }
    resultado = "jogando";
}
    return 0;
}
